using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;
public class UDPHolePunchTest : MonoBehaviour
{
    
    //pc is behind router. router is at ipv4 address routerIP downstream behind router through WAN port (connection not allowed)
    //phone is ipv4 address phoneIP upstream through LAN port (connection allowed)
    //Send from phone to computer, should go through only after computer to phone
    //send message from computer to phone, should go through and enable text.
    
    private List<string> messageReceived = new List<string>();
    [SerializeField]
    private GameObject displayText;
    private Task _task;
    [SerializeField]
    private string phoneIP;
    [SerializeField]
    private string routerIP;
    public void SendToPhone()
    {
        System.Threading.Tasks.Task.Run(() =>
        {
            try
            {
                using (UdpClient client = new UdpClient())
                {
                    client.ExclusiveAddressUse = false;
                    var from = new IPEndPoint(0, 0);
                    client.Client.Bind(new IPEndPoint(IPAddress.Any, 27800));
                    byte[] b = Encoding.ASCII.GetBytes("sent by pc");
                    client.Send(b, b.Length, new IPEndPoint(IPAddress.Parse(phoneIP), 27800));
                    var buff = client.Receive(ref from);
                    
                    messageReceived.Add(Encoding.ASCII.GetString(buff));
                }
            }
            catch (Exception e)
            {
                Debug.Log(e + " failed to go through");
            }
        });
    }

    public void SendToPC()
    {
        System.Threading.Tasks.Task.Run(() =>
        {
            try
            {
                using (UdpClient client = new UdpClient())
                {
                    var from = new IPEndPoint(0, 0);
                    client.ExclusiveAddressUse = false;
                    client.Client.Bind(new IPEndPoint(IPAddress.Any, 27800));
                    byte[] b = Encoding.ASCII.GetBytes("sent by phone");
                   var buff= client.Receive(ref from);
                    client.Send(b, b.Length, new IPEndPoint(IPAddress.Parse(routerIP), 27800));
                    messageReceived.Add(Encoding.ASCII.GetString(buff));
                }
            }
            catch (Exception e)
            {
                Debug.Log(e + " failed to go through");
            }

        });
    }
    private void Update()
    {
        if (messageReceived.Count > 0)
        {
            displayText.SetActive(true);
            displayText.GetComponent<Text>().text = messageReceived[0];
            messageReceived.Remove(messageReceived[0]);
            Invoke(nameof(TurnOff),3f);
        }
    }
    void TurnOff() => displayText.SetActive(false);
}
